#include <algorithm>
#include <arpa/inet.h>
#include <chrono>
#include <cmath>
#include <csignal>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iterator>
#include <limits>
#include <netinet/in.h>
#include <opencv2/opencv.hpp>
#include <sstream>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <tuple>
#include <unistd.h>
#include <vector>

using namespace std;
using namespace cv;

struct LaneCurve {
	double a, b, c;
	int line_segs_index;
	int freq, last_seen;

	LaneCurve() {}

	LaneCurve(double n_a, double n_b, double n_c, int f, int l) :
		a(n_a),
		b(n_b),
		c(n_c),
		freq(f),
		last_seen(l)
	{   
	}   

	LaneCurve(tuple<double, double, double> c_param, int f, int l) :
		a(get<0>(c_param)),
		b(get<1>(c_param)),
		c(get<2>(c_param)),
		freq(f),
		last_seen(l)
	{   
	}   

	Point vertex() {
		double h = -b / (2 * a == 0 ? numeric_limits<double>::min() : 2 * a); 
		double k = c - (a * pow(h, 2));

		return Point(h, k); 
	}   

	double eval_y(int x) {
		return a * pow(x, 2) + b * x + c;
	}   

	int* eval_x(int y) {
		static int ret[2];
		double dis = pow(b, 2) - 4 * a * (c - y); 

		if (dis < 0)
			return NULL;

		ret[0] = (int)((pow(b, 2) - sqrt(dis)) / (2 * a));
		ret[1] = (int)((pow(b, 2) + sqrt(dis)) / (2 * a));

		return ret;
	}   
};

int main() {
	// TODO: Get lane_lines from p_sock

	int n_sock, p_sock;
	// Lane parameters
	vector<vector<Point> > lane_lines;
	vector<tuple<double, double, double> > curves;
	vector<LaneCurve> lane_memory;
	vector<vector<LaneCurve>::iterator> curr_lanes;
	vector<LaneCurve>::iterator curr_left_lane, curr_right_lane;

	while (true) {
		// Map curves of best fit
		for (auto it = lane_lines.begin(); it != lane_lines.end(); it++) {
			vector<Point> points = *it;

			Mat design(points.size(), 3, CV_64FC1);
			Mat y_vec(points.size(), 1, CV_64FC1);

			for (int i = 0; i < points.size(); i++) {
				design.at<double>(i, 0) = 1.0;
				design.at<double>(i, 1) = points[i].x;
				design.at<double>(i, 2) = pow(points[i].x, 2);

				y_vec.at<double>(i, 0) = points[i].y;
			}

			Mat std_poly = ((design.t() * design).inv() * design.t()) * y_vec;

			double a = std_poly.at<double>(0, 2);
			double b = std_poly.at<double>(0, 1);
			double c = std_poly.at<double>(0, 0);

			curves.push_back(tuple<double, double, double>(a, b, c));
		}

		// Update lane memory
		for (int i = 0; i < curves.size(); i++) {
			int m_index;
			for (m_index = 0; m_index < lane_memory.size(); m_index++) {
				// Curve parameters for quick use
				double a1 = get<0>(curves[i]);
				double b1 = get<1>(curves[i]);
				double c1 = get<2>(curves[i]);
				double a2 = lane_memory[m_index].a;
				double b2 = lane_memory[m_index].b;
				double c2 = lane_memory[m_index].c;

				// PsOI parameters
				double x[4];

				double det = pow(b2 - b1, 2) - 4 * (a2 - a1) * (c2 - c1);

				x[0] = 0;
				x[1] = std::max(det < 0 ? 0 : (- (b2 - b1) - sqrt(det)) / (2 * (a2 - a1)), 0.0);
				x[2] = std::min(det < 0 ? CameraManager::getFrame(0)->cols : (- (b2 - b1) + sqrt(det)) / (2 * (a2 - a1)), (double)CameraManager::getFrame(0)->cols);
				x[3] = CameraManager::getFrame(0)->cols;

				double diff = 0.0;  // Area between curves - No
				for (int i = 0; i < 3; i++) {
					diff += abs((pow(x[i + 1], 3) * (a1 - a2) / 3 + pow(x[i + 1], 2) * (b1 - b2) / 2 + x[i + 1] * (c1 - c2)) - (pow(x[i], 3) * (a1 - a2) / 3 + pow(x[i], 2) * (b1 - b2) / 2 + x[i] * (c1 - c2)));
				}

				//if (diff < 40000)
				//      break;
			}

			if (m_index == lane_memory.size()) {  // New lane
				lane_memory.push_back(LaneCurve(curves[i], 0, 0));
			}
			else {
				lane_memory[m_index].a = get<0>(curves[i]);
				lane_memory[m_index].b = get<1>(curves[i]);
				lane_memory[m_index].c = get<2>(curves[i]);
				lane_memory[m_index].last_seen = -1;
			}

			lane_memory[m_index].line_segs_index = i;
			lane_memory[m_index].freq++;
		}

		// TODO: Send lane_memory
	}

	return 0;
}
